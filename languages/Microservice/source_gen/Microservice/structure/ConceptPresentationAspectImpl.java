package Microservice.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_BehaviorMethod;
  private ConceptPresentation props_InputPort;
  private ConceptPresentation props_Interface;
  private ConceptPresentation props_OutputPort;
  private ConceptPresentation props_Parameter;
  private ConceptPresentation props_Port;
  private ConceptPresentation props_RequestMessage;
  private ConceptPresentation props_RequestResponse;
  private ConceptPresentation props_ResponseMessage;
  private ConceptPresentation props_ServiceBehavior;
  private ConceptPresentation props_ThrowMessage;
  private ConceptPresentation props_microservice;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.BehaviorMethod:
        if (props_BehaviorMethod == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_BehaviorMethod = cpb.create();
        }
        return props_BehaviorMethod;
      case LanguageConceptSwitch.InputPort:
        if (props_InputPort == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_InputPort = cpb.create();
        }
        return props_InputPort;
      case LanguageConceptSwitch.Interface:
        if (props_Interface == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Interface = cpb.create();
        }
        return props_Interface;
      case LanguageConceptSwitch.OutputPort:
        if (props_OutputPort == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_OutputPort = cpb.create();
        }
        return props_OutputPort;
      case LanguageConceptSwitch.Parameter:
        if (props_Parameter == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("parameter");
          props_Parameter = cpb.create();
        }
        return props_Parameter;
      case LanguageConceptSwitch.Port:
        if (props_Port == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Port = cpb.create();
        }
        return props_Port;
      case LanguageConceptSwitch.RequestMessage:
        if (props_RequestMessage == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_RequestMessage = cpb.create();
        }
        return props_RequestMessage;
      case LanguageConceptSwitch.RequestResponse:
        if (props_RequestResponse == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_RequestResponse = cpb.create();
        }
        return props_RequestResponse;
      case LanguageConceptSwitch.ResponseMessage:
        if (props_ResponseMessage == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ResponseMessage = cpb.create();
        }
        return props_ResponseMessage;
      case LanguageConceptSwitch.ServiceBehavior:
        if (props_ServiceBehavior == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ServiceBehavior = cpb.create();
        }
        return props_ServiceBehavior;
      case LanguageConceptSwitch.ThrowMessage:
        if (props_ThrowMessage == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ThrowMessage = cpb.create();
        }
        return props_ThrowMessage;
      case LanguageConceptSwitch.microservice:
        if (props_microservice == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_microservice = cpb.create();
        }
        return props_microservice;
    }
    return null;
  }
}
