package Microservice1.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Execution;
  private ConceptPresentation props_InputPort;
  private ConceptPresentation props_Interface;
  private ConceptPresentation props_Node;
  private ConceptPresentation props_Operation;
  private ConceptPresentation props_OutputPort;
  private ConceptPresentation props_Port;
  private ConceptPresentation props_RequestMessageType;
  private ConceptPresentation props_RequestResponse;
  private ConceptPresentation props_ResponseMessageType;
  private ConceptPresentation props_microservice;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Execution:
        if (props_Execution == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Execution = cpb.create();
        }
        return props_Execution;
      case LanguageConceptSwitch.InputPort:
        if (props_InputPort == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_InputPort = cpb.create();
        }
        return props_InputPort;
      case LanguageConceptSwitch.Interface:
        if (props_Interface == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Interface = cpb.create();
        }
        return props_Interface;
      case LanguageConceptSwitch.Node:
        if (props_Node == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Node = cpb.create();
        }
        return props_Node;
      case LanguageConceptSwitch.Operation:
        if (props_Operation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Operation = cpb.create();
        }
        return props_Operation;
      case LanguageConceptSwitch.OutputPort:
        if (props_OutputPort == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_OutputPort = cpb.create();
        }
        return props_OutputPort;
      case LanguageConceptSwitch.Port:
        if (props_Port == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Port = cpb.create();
        }
        return props_Port;
      case LanguageConceptSwitch.RequestMessageType:
        if (props_RequestMessageType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_RequestMessageType = cpb.create();
        }
        return props_RequestMessageType;
      case LanguageConceptSwitch.RequestResponse:
        if (props_RequestResponse == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_RequestResponse = cpb.create();
        }
        return props_RequestResponse;
      case LanguageConceptSwitch.ResponseMessageType:
        if (props_ResponseMessageType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ResponseMessageType = cpb.create();
        }
        return props_ResponseMessageType;
      case LanguageConceptSwitch.microservice:
        if (props_microservice == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_microservice = cpb.create();
        }
        return props_microservice;
    }
    return null;
  }
}
